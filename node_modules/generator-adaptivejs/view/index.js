'use strict';
var _ = require('lodash');
var fs = require('fs');
var util = require('util');
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var path = require('path');

var ViewGenerator = module.exports = function ViewGenerator(args, options, config) {
    yeoman.generators.Base.apply(this, arguments);

    this.on('end', function () {
        console.log(chalk.bold.yellow('\nDon\'t forget to do the following:'));
        console.log(chalk.bold.yellow('- add \'pages/' + this.viewName + '/' + this.viewName + '-view\' to app/global/router.js.'));
        console.log(chalk.bold.yellow('- add \'pages/' + this.viewName + '/' + this.viewName + '-ui\' to app/ui.js.'));
        console.log(chalk.bold.yellow('- add \'tests/integration/' + this.viewName + 'Test\' to tests/runner/testRunner.js'));
    });
};

util.inherits(ViewGenerator, yeoman.generators.Base);

// return a provided view name in camelCase
var camelCaseViewName = function(viewName) {
    var words = viewName.split(/[^\w]/);

    return words.map(function(word, idx) {
        // skip the first word and words with no length
        if (idx === 0 || word.length === 0) {
            return word;
        }

        return word[0].toUpperCase() + word.slice(1);
    }).join('');
};

ViewGenerator.prototype.askFor = function askFor() {
    var callback = this.async();
    var choices = [];

    // Add base if it exists
    if (fs.statSync('./app/global/base-view.js').isFile()) {
        choices.push({
            name: 'base',
            value: 'base'
        });
    }

    // Compile list of views to extend from (only js files)
    var views = this.expandFiles('./app/pages/**/*-view.js').forEach(function(viewPath, _) {
        var view = viewPath.split(path.sep)[3];

        choices.push({
            name: view,
            value: view
        });
    });

    var prompts = [
        {
            type: 'input',
            name: 'viewName',
            message: 'What do you want to name your page?',
            validate: function (answer) {
                if (!answer.length) {
                    return 'You must enter a name.';
                } else if (/\s/.test(answer)) {
                    return 'Please remove any whitespace characters.';
                }

                return true;
            }
        },
        {
            type: 'list',
            name: 'parentView',
            message: 'What page do you want to extend from?',
            choices: choices
        }
    ];

    this.prompt(prompts, function (props) {
        this.viewName = props.viewName;
        this.uiFunction = camelCaseViewName(this.viewName);
        this.createUIScript = props.createUIScript;

        // Different base paths for baseView vs. custom extended view
        if (props.parentView === 'base') {
            this.parentTemplateFilePath = 'global/base';
            this.parentViewFilePath = 'global/base-view';
            this.parentView = 'BaseView';
        } else {
            this.parentTemplateFilePath = 'pages/' + props.parentView + '/' + props.parentView;
            this.parentViewFilePath = 'pages/' + props.parentView + '/' + props.parentView + '-view';

            // View names must begin with an uppercase character
            this.parentView = props.parentView[0].toUpperCase() +
                props.parentView.slice(1);

            // Can't have dashes in JS variable names
            if (/-/.test(this.parentView)) {
                this.parentView = camelCaseViewName(this.parentView);
            }
        }

        callback();
    }.bind(this));
};

ViewGenerator.prototype.files = function files() {
    this.runViewUI =
        _.template(
            fs.readFileSync(__dirname + '/templates/_runViewUI.dust'),
            this
        );

    // Using __dirname allows the 'page' alias to be used properly with this generator
    this.template(path.join(__dirname, 'templates/_viewFile.js'), 'app/pages/' + this.viewName + '/' + this.viewName + '-view.js');
    this.template(path.join(__dirname, 'templates/_viewTemplate.dust'), 'app/pages/' + this.viewName + '/' + this.viewName + '.dust');
    this.template(path.join(__dirname, 'templates/_viewTest.js'), 'tests/integration/' + this.viewName + 'Test.js');
    this.template(path.join(__dirname, 'templates/_viewFixture.html'), 'tests/fixtures/' + this.viewName + '.html');
    this.template(path.join(__dirname, 'templates/_uiFile.js'), 'app/pages/' + this.viewName + '/' + this.viewName + '-ui.js');
};
