'use strict';

var exec = require('child_process').exec;
var fs = require('fs');
var path = require('path');
var _ = require('lodash');
var chalk = require('chalk');
var processArgs = require('minimist')(process.argv.slice(2));
var semver = require('semver');
var util = require('util');
var yeoman = require('yeoman-generator');
var PackageDependencies = require('./libs/packageDependencies');
var bowerDependencies = require('./dependencies/bowerDependencies.json');
var npmDependencies = require('./dependencies/npmDependencies.json');
var isWindows = process.platform === 'win32';
var vasync = require('vasync');
var packageJson = require('../package.json');

var homeDirectory = isWindows ? process.env.USERPROFILE : process.env.HOME;

var getVellum = function() {
    var callback = this.async();

    this.remote('mobify', 'vellum', 'master', function(err, remote) {
        if (err) {
            callback(err);
        }

        remote.directory('dist', 'app/global/styles');
        callback();
    }, true);
};

// Grab the semver value from a JSON string
var getGeneratorVersionFromNpmJson = function(stdout) {
    try {
        var versionInfo = JSON.parse(stdout);
        if (typeof versionInfo == 'string') {
            return versionInfo;
        } else {
            return versionInfo['dependencies']['generator-adaptivejs']['version']
        }
    } catch (e) {
        return undefined;
    }
};

var AdaptiveGenerator = module.exports = function AdaptiveGenerator(args, options, config) {
    yeoman.generators.Base.apply(this, arguments);

    this.on('end', function() {

        // Some tests skip install
        if (!options.skipInstall) {

            var onComplete = function() {
                console.log('All finished!');
            };

            var runNpmInstall = function(arg, callback) {
                var npmOptions = {};
                var cb = function(err) {
                    if (err) {
                        var warning = 'There was an error running npm install.\n' +
                                      'Check the permissions on your .npm folder.';
                        console.log(chalk.yellow(chalk.bold(warning)));
                        console.log(err);
                        process.exit(1);
                    }
                    callback();
                };

                this.npmInstall(null, npmOptions, cb);
            }.bind(this);

            var runBowerInstall = function(arg, callback) {
                var bowerOptions = {
                    '--config.interactive': false
                };
                var cb = function(err) {
                    if (err) {
                        var warning = 'There was an error running bower install.\n';
                        console.log(chalk.yellow(chalk.bold(warning)));
                        process.exit(1);
                    }
                    callback();
                };

                this.bowerInstall(null, bowerOptions, cb);
            }.bind(this);

            var runBundleInstall = function(arg, callback) {
                if (this.useSass) {
                    var child = this.spawnCommand('bundle', ['install'], {
                        cwd: process.cwd()
                    });

                    child.on('exit', callback);
                } else {
                    callback();
                }
            }.bind(this);

            var runComponentInstall = function(arg, callback) {
                if (this.useSass) {
                    this.invoke('adaptivejs:component', {options: {
                        'componentName': 'example',
                        'description': 'This is an example component',
                        'hasUi': true
                    }}, callback);
                }
            }.bind(this);

            vasync.pipeline({
                funcs: [
                    runNpmInstall,
                    runBundleInstall,
                    runBowerInstall,
                    runComponentInstall
                ]
            }, onComplete);
        }

    });
};

util.inherits(AdaptiveGenerator, yeoman.generators.Base);

/**
 *  Check to see if you the user has the latest version
 *  of the generator
 */
AdaptiveGenerator.prototype.checkVersion = function() {
    var self = this;
    var done = this.async();

    console.log('Checking for newer versions of generator-adaptivejs...');

    exec('npm list -g generator-adaptivejs --json', function(err, stdout) {
        var localError = 'There was an error getting the local version of generator-adaptivejs';
        // Checking for result here rather then error because there are situations where you still get
        // the version information, but it comes with an error as well (like when testing using
        // npm link). As long as there is a result, we're good to continue.
        if (!stdout) {
            console.log(localError)
            console.log(err);
            return done();
        }

        var localVersion = getGeneratorVersionFromNpmJson(stdout);
        if (!localVersion) {
            console.log(localError);
            return done();
        }

        exec('npm info generator-adaptivejs version --json', function(err, stdout) {
            var latestError = 'There was an error getting the latest version of generator-adaptivejs';

            // Checking for result here rather then error because there are
            // situations where you still get the version information, but it
            // comes with an error as well (like when testing using npm link).
            // As long as there is a result, we're good to continue.
            if (!stdout) {
                console.log(latestError)
                console.log(err);
                return done();
            }

            var latestVersion = getGeneratorVersionFromNpmJson(stdout);

            if (!latestVersion) {
                console.log(latestError);
                return done();
            }

            // If the local version is not less then the latest version on the
            // npm repo, return
            if (semver.gte(localVersion, latestVersion)) {
                console.log('The version of the generator you have installed is up-to-date!');
                return done();
            }

            var prompts = {
                type: 'confirm',
                name: 'upgrade',
                message: 'We have detected that there is a newer version of generator-adaptivejs available.\n' +
                         'Would you like to upgrade? (recommended)',
                default: true
            };

            self.prompt(prompts, function(props) {
                if (props.upgrade) {
                    console.log('\nPlease run the following command:\n\n' +
                                '    npm update -g generator-adaptivejs\n\n' +
                                'When complete, please generate your project again!');
                    return process.exit(0);
                }
                return done();
            });
        });
    });
};

/**
 *  Check that git is installed so we can install bower dependencies
 */
AdaptiveGenerator.prototype.checkGit = function checkGit() {
    var done = this.async();

    exec('git --version', function(err) {
        if (err) {
            console.log(chalk.yellow(chalk.bold('You must have git installed to create a project')));
            console.log('http://git-scm.com/book/en/Getting-Started-Installing-Git');
            process.exit(1);
        }
        done();
    });
};

/**
 *  Checks to see if the user has already accepted the mobify licence.
 *  If not, display the licence.
 */
AdaptiveGenerator.prototype.acceptLicense = function acceptLicense() {
    var callback = this.async();
    var adaptiveGlobalSettingsPath = path.join(homeDirectory, '.adaptiverc');
    this.acceptedLicense = false;

    // Check if licence file is there, and read it
    if (fs.existsSync(adaptiveGlobalSettingsPath)) {
        this.acceptedLicense = JSON.parse(this.readFileAsString(adaptiveGlobalSettingsPath)).acceptedLicense;
    }

    // If the licence is accepted, don't display it
    if (this.acceptedLicense) {
        callback();
        return true;
    }

    var prompts = [{
        type: 'confirm',
        name: 'openLicense',
        message: 'We have a license you must read and agree to. Read license?',
        default: false
    }];

    this.prompt(prompts, function(props) {
        if (!props.openLicense) {
            process.exit(0);
        }

        // Display licence
        var license = path.join(__dirname, '../LICENSE');
        var child;

        if (isWindows) {
            child = this.spawnCommand('start', ['notepad', license]);
        } else {
            child = this.spawnCommand('less', [license]);
        }

        // After the user closes the license, ask them to accept it
        child.on('exit', function() {

            var prompts = [
                {
                    type: 'confirm',
                    name: 'acceptLicense',
                    message: 'I have read, understand, and accept the terms and conditions stated in the license above.',
                    default: false
                }
            ];

            this.prompt(prompts, function(props) {
                // Exit if terms aren't accpeted
                if (!props.acceptLicense) {
                    process.exit(0);
                }

                // Save licence file so users don't see the licence every time
                fs.writeFile(adaptiveGlobalSettingsPath, '{"acceptedLicense": true}', function(err) {
                    if (err) {
                        throw err;
                    }
                });

                callback();
            });

        }.bind(this));
    }.bind(this));

};

AdaptiveGenerator.prototype.askFor = function askFor() {
    var callback = this.async();

    var mergeDefaults = function(props) {
        var defaultsName = _.isBoolean(processArgs.defaults) ? 'default' : processArgs.defaults;
        var defaultsPath = util.format('defaults/%s.json', defaultsName);
        var defaults = JSON.parse(fs.readFileSync(path.join(__dirname, defaultsPath)));

        props = _.extend(props, defaults);

        return props;
    };

    // have Yeoman greet the user.
    console.log(this.yeoman);

    var prompts = [];

    // If no slug was provided, ask for it
    if (!processArgs.slug) {
        prompts.push({
            type: 'input',
            name: 'projectSlug',
            message: 'What is your project name? (if using Mobify Cloud, this should be your \n  project slug):',
            validate: function(answer) {
                if (!answer.length) {
                    return 'You must enter a name.';
                }
                return true;
            }
        });
    }

    // If no slug was provided, ask for it
    if (!processArgs.url) {
        prompts.push({
            type: 'input',
            name: 'siteUrl',
            message: 'What is the URL of your project?',
            default: ''
        });
    }

    if (!processArgs.defaults) {
        prompts = prompts.concat([
            {
                type: 'list',
                name: 'selectorLibrary',
                message: 'Do you want Zepto or jQuery?',
                choices: [
                    {name: 'jQuery', value: 'jQuery'},
                    {name: 'Zepto', value: 'Zepto'}
                ]
            },
            {
                type: 'confirm',
                name: 'useDust',
                message: 'Do you want to use Dustjs templating?',
                default: true
            },
            {
                type: 'confirm',
                name: 'useSass',
                message: 'Do you want to write your CSS with Sass?'
                    + chalk.gray(' Includes Mobify’s Vellum base styles\n  (https://github.com/mobify/vellum).\n')
                    + chalk.gray.bold('  Note:')
                    + chalk.gray(' Bundler will be used to manage the Sass dependency. Find more about\n  bundler at http://bundler.io'),
                default: true
            },
            {
                type: 'confirm',
                name: 'useNightwatch',
                message: 'Do you want the Nightwatch testing framework?',
                default: true
            },
            {
                type: 'confirm',
                name: 'useLinting',
                message: 'Do you want to lint your JavaScript files (eslint using Mobify\'s linting rules)?',
                default: true
            }
        ]);
    }

    this.prompt(prompts, function(props) {
        if (processArgs.defaults) {
            props = mergeDefaults(props);
        }

        this.buildTasks = {
            dev: ['adaptive-build_dev'],
            prod: ['adaptive-build_prod'],
            preview: ['build_dev', 'adaptive-preview'],
            push: ['adaptive-push'],
            toJSON: function(o) {
                return JSON.stringify(o).replace(/"/g, '\'');
            }
        };

        this.npmDependencies = new PackageDependencies(npmDependencies.adaptiveDefaults);

        // Add assets bower deps to bower.json
        var bowerDefaults = _.extend(bowerDependencies.adaptiveDefaults,
            bowerDependencies.assetsDefaults);
        this.bowerDependencies = new PackageDependencies(bowerDefaults);

        this.generatorVersion = packageJson.version;
        this.projectSlug = props.projectSlug || processArgs.slug;
        this.siteUrl = props.siteUrl || processArgs.url;
        this.adaptiveVersion = props.adaptiveVersion;
        this.selectorLibrary = props.selectorLibrary;
        this.useSass = props.useSass;

        if (props.useDust) {
            this.bowerDependencies.add(bowerDependencies.dust);
        }

        if (props.useSass) {
            this.bowerDependencies.add(bowerDependencies.sass);
            this.npmDependencies.add(npmDependencies.sass);

            this.buildTasks.dev.unshift('adaptive-compile-css__dev');
            this.buildTasks.prod.unshift('adaptive-compile-css__prod');
            this.buildTasks.push.unshift('adaptive-compile-css__prod');
        }

        if (props.useNightwatch) {
            this.npmDependencies.add(npmDependencies.nightwatch);
        }

        if (props.useLinting) {
            this.buildTasks.dev.unshift('lint:dev');
            this.buildTasks.prod.unshift('lint:prod');
            this.buildTasks.push.unshift('lint:prod');

            this.npmDependencies.add(npmDependencies.linting);
        }

        // Clear the build folder first before building
        this.buildTasks.dev.unshift('adaptive-clean_build');
        this.buildTasks.prod.unshift('adaptive-clean_build');
        this.buildTasks.push.unshift('adaptive-clean_build');

        callback();

    }.bind(this));
};

AdaptiveGenerator.prototype.app = function app() {

    this.mkdir(this.projectSlug);
    this.destinationRoot(this.projectSlug);
    this.mkdir('tasks');
    this.mkdir('tasks/config');
    this.mkdir('app/vendor');

    // UI script linking for the homepage template
    this.runViewUI =
        _.template(
            fs.readFileSync(path.join(__dirname, '../view/templates/') +
                '_runViewUI.dust'), _.extend(this, {
                viewName: 'home',
                uiFunction: 'home'
            })
        );

    this.selectorLibPath = path.join('vendor', this.selectorLibrary);

    this.directory(path.join('selector-libs', this.selectorLibrary), 'app/vendor');

    if (this.bowerDependencies.includes('dustjs-linkedin')) {
        this.directory('vendor', 'app/vendor');
    }

    if (this.npmDependencies.includes('nightwatch')) {
        this.directory('tasks/nightwatch', 'tasks/nightwatch');
        this.directory('tests/system', 'tests/system');
        this.template('tests/_site.json', 'tests/system/site.json');
    }

    this.directory('app', 'app');
    this.directory('static', 'static');
    this.directory('tests/integration', 'tests/integration');
    this.directory('tests/unit', 'tests/unit');
    this.directory('tests/fixtures', 'tests/fixtures');
    this.directory('tests/runner', 'tests/runner');
    this.copy('tasks/config/connect.js', 'tasks/config/connect.js');
    this.copy('gitignore', '.gitignore');
    this.copy('bowerrc', '.bowerrc');
    this.copy('editorconfig', '.editorconfig');

    // only include the circle.yml template in mobify defaults projects
    if (processArgs.defaults === 'mobify') {
        this.copy('circle.yml', 'circle.yml');
    }

    this.template('_package.json', 'package.json');
    this.template('_bower.json', 'bower.json');
    this.template('_Gruntfile.js', 'Gruntfile.js');
    this.template('tests/_config.js', 'tests/runner/config.js');
    this.template('_home-template.dust', 'app/pages/home/home.dust');
    this.template('_README.md', 'README.md');

    if (this.npmDependencies.includes('grunt-eslint')) {
        this.directory('tasks/lint', 'tasks/lint');

        // Copy over eslint files
        this.directory('tasks/eslint', 'tasks/eslint');
        this.copy('tasks/config/eslint.js', 'tasks/config/eslint.js');

        this.copy('jslinting.js', 'tasks/jslinting.js');
    }

    if (this.useSass) {
        this.directory('tasks/compile-css', 'tasks/compile-css');

        this.copy('styles/stylesheet.scss', 'app/stylesheet.scss');
        this.copy('styles/_pages.scss', 'app/global/styles/_pages.scss');
        this.copy('styles/_components.scss', 'app/global/styles/_components.scss');
        this.copy('styles/_utilities.scss', 'app/global/styles/_utilities.scss');

        this.copy('styles/_header.scss', 'app/global/includes/header/_header.scss');
        this.copy('styles/_home.scss', 'app/pages/home/_home.scss');

        this.copy('tasks/config/autoprefixer.js', 'tasks/config/autoprefixer.js');
        this.copy('tasks/config/watch.js', 'tasks/config/watch.js');
        this.copy('tasks/config/sass.js', 'tasks/config/sass.js');
        this.copy('_Gemfile', 'Gemfile');

        getVellum.call(this);
    } else {
        // this.fs.delete('app/**/*.scss'); // Requires newer version of Yeoman
        this.copy('_stylesheet.css', 'static/css/stylesheet.css');
    }
};
