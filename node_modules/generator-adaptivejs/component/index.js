'use strict';
var _ = require('lodash');
var fs = require('fs');
var util = require('util');
var yeoman = require('yeoman-generator');
var chalk = require('chalk');
var yosay = require('yosay');
var _s = require('underscore.string');
var camelcase = require('camelcase');
var vasync = require('vasync');

var titleize = function(string) {
    return _s.titleize(_s.humanize(string));
}.bind(this);

var ComponentGenerator = module.exports = function ComponentGenerator(args, options, config) {
    yeoman.generators.Base.apply(this, arguments);

    this.option('stencil');
    this.pkg = require('../package.json');
    this.namespace = (this.options.stencil) ? 'stencil' : 'component';
    this.titleize = titleize;

    this.on('end', function () {
        // If the component or stencil already exists, abort! We've created nothing
        if (this.exists) {
            console.log('\n\t' + chalk.bold.red('Aborting:') + ' ' + chalk.gray(this.destination()) + ' appears to already exist.\n');
            return;
        }

        var onComplete = function() {
            // Alert the user that we've succeeded
            console.log('\n\t' + chalk.green('Successfully') + ' created ' + this.namespace + ' "' + this.componentName + '" in ' + chalk.gray(this.destination()) + '\n');

            // Explicitly exit the process, in the case that the parent project
            // generator invokes us
            process.exit(0);
        }.bind(this);

        if (!options.skipInstall) {
            var runNpmInstall = function(arg, callback) {
                process.chdir(this.paths.stencil.destPath);

                var npmOptions = {};
                var cb = function(err) {
                    if (err) {
                        var warning = 'There was an error running npm install.\n' +
                                      'Check the permissions on your .npm folder.';
                        console.log(chalk.yellow(chalk.bold(warning)));
                        console.log(err);
                        process.exit(1);
                    }
                    callback();
                };

                this.npmInstall(null, npmOptions, cb);

                process.chdir('..');
            }.bind(this);

            var runBowerInstall = function(arg, callback) {
                process.chdir(this.paths.stencil.destPath);

                var bowerOptions = {
                    '--config.interactive': false
                };
                var cb = function(err) {
                    if (err) {
                        var warning = 'There was an error running bower install.\n';
                        console.log(chalk.yellow(chalk.bold(warning)));
                        process.exit(1);
                    }
                    callback();
                };

                this.bowerInstall(null, bowerOptions, cb);

                process.chdir('..');
            }.bind(this);

            var installComponent = function(arg, callback) {
                // Install the component (skip if this is a stencil)
                if (this.namespace == 'component') {
                    var child = this.spawnCommand('grunt', ['component:install:' + this.componentName, '--local']);
                    child.on('exit', callback);
                }
            }.bind(this);

            var funcs = [];

            if (this.namespace === 'component') {
                funcs.push(installComponent);
            }

            if (this.namespace === 'stencil') {
                funcs.push(runNpmInstall);
                funcs.push(runBowerInstall);
            }

            vasync.pipeline({
                funcs: funcs
            }, onComplete);
        }
    });
};

util.inherits(ComponentGenerator, yeoman.generators.Base);

ComponentGenerator.prototype.askFor = function askFor() {
    var callback = this.async();

    // @TODO: Add a prompt and task for adding stencil components
    var prompts = [];

    if (!this.options.componentName) {
        prompts.push({
            mode: 'input',
            name: 'componentName',
            message: 'What do you want to name your ' + this.namespace + '?',
            validate: function (answer) {
                if (!answer.length) {
                    return 'You must enter a name.';
                }
                return true;
            },
            filter: function(input) {
                // Remove leading namespace if provided and normalize string
                // format.
                var nsRegex = new RegExp('^' + this.namespace + '(-)?');
                return input.toLowerCase().replace(/[_\s]+/g, '-').replace(/-{2,}/g, '-').replace(nsRegex, '');
            }.bind(this)
        });
    }

    if (!this.options.description) {
        prompts.push({
            type: 'input',
            name: 'description',
            message: 'description:',
            default: '',
            filter: function(input) {
                // Capitalize and remove trailing period.
                return _s.capitalize(input.replace(/\.(\s)*$/, ''));
            }
        });
    }

    if (!this.options.hasUi) {
        prompts.push({
            type: 'confirm',
            name: 'hasUi',
            message: 'Does this component have a UI script?',
            default: false
        });
    }

    this.prompt(prompts, function (props) {
        this.componentName = props.componentName || this.options.componentName;
        this.description = props.description || this.options.description;

        this.pkgName = this.namespace + '-' + this.componentName;
        this.repo = 'http://github.com/mobify/' + this.pkgName + '.git';
        this.hasUi = props.hasUi || this.options.hasUi;

        callback();
    }.bind(this));
};

ComponentGenerator.prototype.files = function files() {
    this.paths = {
        component: {
            srcRoot : __dirname + '/templates/',
            destRoot: 'app/components/',
            destPath: 'app/components/' + this.componentName + '/',
            destSrc : 'app/components/' + this.componentName + '/',
        },
        stencil: {
            srcRoot  : __dirname + '/templates/',
            srcPath  : __dirname + '/templates/stencil/',
            destRoot : './',
            destPath : './stencil-' + this.componentName + '/',
            destSrc  : './stencil-' + this.componentName + '/src/',
            testsRoot: './stencil-' + this.componentName + '/tests/',
            testsPath: './stencil-' + this.componentName + '/tests/visual/'
        }
    };

    // Set paths to the mode we're in (stencil or component)
    var paths = this.paths[this.namespace];

    // Make the destination available for the `on.('end', function)` step above
    this.destination = function() {
        return paths.destPath;
    };


    // Make Directories!
    // ---

    // If the component directory already exists, abort!
    if (fs.existsSync(paths.destPath)) {
        this.exists = true;
        return;
    }

    // Make the component directories
    if (! fs.existsSync(paths.destRoot)) { fs.mkdirSync(paths.destRoot) };
    fs.mkdirSync(paths.destPath);

    // Make the src dir if we're building a Stencil component
    if (this.options.stencil) {
        // fs.mkdirSync(paths.destSrc);
        fs.mkdirSync(paths.testsRoot);
        fs.mkdirSync(paths.testsPath);
    }


    // Make Files!!
    // ---

    var componentFiles = {
        '_component.scss'    : '_' + this.componentName + '.scss',
        'component.dust'     : this.componentName + '.dust',
        'component-schema.js': this.componentName + '-schema.js'
    };

    if (this.hasUi) {
        componentFiles['component-ui.js'] = this.componentName + '-ui.js';
    }

    var stencilFiles = {
        '_bower.json'  : 'bower.json',
        '_Gemfile'     : 'Gemfile',
        '_Gruntfile.js': 'Gruntfile.js',
        '_LICENSE'     : 'LICENSE',
        '_package.json': 'package.json',
        '_README.md'   : 'README.md',
        'editorconfig' : '.editorconfig',
        'gitignore'    : '.gitignore'
    };

    var testFiles = {
        'test.html'     : 'index.html',
        'test.scss'     : 'test.scss',
        'test-runner.js': 'runner.js',
        'tests.dust'    : 'tests.dust'
    };

    // Make component SCSS, Dust and JS files
    for(var srcFile in componentFiles) {
        var destFile = componentFiles[srcFile];

        // Get that file's contents in prep for templating
        var contents = fs.readFileSync(paths.srcRoot + srcFile);

        // Prepare the new file path
        var newFilePath = paths.destPath + destFile;

        // Prepare UI data attribute
        var uiDataPrefix = (this.namespace == 'stencil') ? 'stencil-' : '';
        var uiDataAttr = 'data-adaptivejs-component="' + uiDataPrefix + this.componentName + '"';

        // Write the file
        fs.writeFileSync(newFilePath, _.template(contents, {
            componentName: this.componentName,
            titleize: titleize,
            isStencil: this.options.stencil,
            uiDataAttr: (this.hasUi) ? ' ' + uiDataAttr : null // space is for cleaner dust output
        }));
    }

    // Only stencil files here on out
    if (!this.options.stencil) return;

    // Make Stencil files
    for(var templateFile in stencilFiles) {
        var targetFile = stencilFiles[templateFile];

        // Get that file's contents in prep for templating
        var contents = fs.readFileSync(paths.srcPath + templateFile);

        fs.writeFileSync(paths.destPath + targetFile, _.template(contents, {
            name: this.componentName,
            pkgName: this.pkgName,
            description: this.description,
            repo: this.repo,
            titleize: titleize
        }));
    }

    // Make Stencil test files
    for(var file in testFiles) {
        var targetFile = testFiles[file];

        var contents = fs.readFileSync(paths.srcPath + file);

        fs.writeFileSync(paths.testsPath + targetFile, _.template(contents, {
            pkgName: this.pkgName,
            titleize: titleize,
            name: this.componentName,
        }));
    }
}
