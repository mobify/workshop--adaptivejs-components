/**
 * Provides installation and uninstallation of both GitHub/mobify Stencils
 * and local components; uses `bower install` for remote Stencil installation
 *
 * Looks inside app/config/component.json to determine component directories
 *
 * Edits the following files; necessary for automatic integration with project:
 * app/config/system/component-installed.json (dust templating)
 * app/config/system/component-paths.js (JS UI)
 * app/config/system/component-ui.js (JS UI)
 * app/global/styles/_components.scss (SCSS)
 *
 * Usage:
 * `grunt component:install|uninstall:<component_name>`
 *
 * Options:
 * --branch <branch_name> - Specifying a GitHub branch other than master
 * --local - If the component to be installed exists as a local component
 */
module.exports = function(grunt) {
    grunt.registerTask('component', 'Component installation and uninstallation', function(mode, componentName) {
        if (arguments.length !== 2 || !(/(un)?install/.test(mode))) {
            grunt.log.error('Usage: `grunt component:install|uninstall:component_name`');
            return false;
        }

        var done = this.async();
        var path = require('path');

        var options = this.options({
            rootPath: 'app',
            componentDirectoriesFile: path.join('config', 'component.json'),
            installedComponentsListFile: path.join('config', 'system', 'component-installed.json'),
            componentPathsFile: path.join('config', 'system', 'component-paths.js'),
            componentUIFile: path.join('config', 'system', 'component-ui.js'),
            componentSCSSFile: path.join('global', 'styles', '_components.scss')
        });

        // We want to be inside the app/ directory for most of this.
        process.chdir(options.rootPath);

        // Get the configuration variables for different base paths for both
        // installed Stencils, and locally created components
        var componentDirectories = grunt.file.readJSON(options.componentDirectoriesFile);
        var installedComponentList = grunt.file.readJSON(options.installedComponentsListFile);

        // Local components can be installed or uninstalled
        var localComponent = grunt.option('local');

        // Sometimes you might want to install a stencil from a branch other than master
        var gitBranch = grunt.option('branch');

        if (gitBranch && typeof gitBranch !== 'string') {
            grunt.log.error('Usage: `grunt component:install|uninstall:stencil_name --branch=branch_name`');
            return false;
        }

        /**
         * Looks inside the given directory for component SCSS file, and imports
         * it via _components.scss
         */
        var updateComponentSCSS = function(mode, componentPath, local) {
            console.log('Looking for ' + componentName + '.scss inside ' + componentPath + ':');

            var basePath = local ? componentDirectories.local + '/' : componentDirectories.stencil + '/stencil-';

            if (!grunt.file.isFile(componentPath, componentName + '.scss') && !grunt.file.isFile(componentPath, '_' + componentName + '.scss')) {
                console.log('Unable to find ' + componentName + '.scss or _' + componentName + '.scss');
            } else {
                var componentSCSSContents = grunt.file.read(options.componentSCSSFile);
                var lines = componentSCSSContents.split('\n');

                var importIndex = -1;
                for (var i = 0, len = lines.length; i < len; i++) {
                    if (lines[i].indexOf(componentName + '\';') > 0) {
                        importIndex = i;
                        break;
                    }
                }

                if (mode === 'install') {
                    if (importIndex < 0) {
                        // Import statement doesn't exist, so add it
                        var newImport = '@import \'' + basePath + componentName + '/' + componentName + '\';\n';

                        grunt.file.write(options.componentSCSSFile, componentSCSSContents + newImport);

                        console.log('[' + mode + '] ' + componentName + '.scss');
                    } else {
                        // Import statement already exists; don't add another!
                        console.log('Did not ' + mode + ' ' + componentName + '.scss, file already imported.');
                    }
                } else {
                    if (importIndex > -1) {
                        // Import statement exists, remove it
                        lines.splice(importIndex, 1);

                        grunt.file.write(options.componentSCSSFile, lines.join('\n'));

                        console.log('[' + mode + '] ' + componentName + '.scss');
                    } else {
                        // No import statement exists, so ignore it
                        console.log('Could not find ' + componentName + '.scss to ' + mode);
                    }
                }
            }
        };

        /**
         * Looks inside the given directory for component-ui.js file, and registers/removes
         * it within:
         * component-paths.js - configuration file for module id <-> path mapping
         * component-ui.js - stub file for including module id as dependency
         */
        var componentPathRegEx = /require.config\(([\s\S]*})/i;
        var componentUIRegEx = /require\(([\s\S]*])/i;
        var updateComponentUI = function(mode, componentPath, local) {
            console.log('Looking for ' + componentName + '.js inside ' + componentPath + ':');

            // Check that the ui-script exists first
            if (!grunt.file.isFile(componentPath, componentName + '-ui.js')) {
                console.log('Unable to find ' + componentName + '-ui.js');
            } else {
                console.log('[' + mode + '] ' + componentName + '-ui.js');

                // This file sets up the map between module ID and file path, and
                // will be combined with config/ui.js
                var componentPathsContents = grunt.file.read(options.componentPathsFile);
                var parsedComponentPaths = componentPathsContents.match(componentPathRegEx);

                // This file is required by app/ui.js, and lists the component
                // dependencies so they are compiled properly
                var componentUIContents = grunt.file.read(options.componentUIFile);
                var parsedComponentUI = componentUIContents.match(componentUIRegEx);

                // Error handling
                if (!parsedComponentPaths) {
                    grunt.fatal('Error parsing required file: ' + options.componentPathsFile);
                }
                else if (!parsedComponentUI) {
                    grunt.fatal('Error parsing required file: ' + options.componentUIFile);
                }

                var pathList = JSON.parse(parsedComponentPaths[1]);
                var UIList = JSON.parse(parsedComponentUI[1]);

                // Installed 'official' stencils get a special prefix
                var fullComponentName = componentName;
                if (!local) {
                    fullComponentName = 'stencil-' + componentName;
                }

                // Do not want duplicate entries in the dependency list
                var arrayIndex = UIList.indexOf(fullComponentName);

                if (mode === 'install') {
                    pathList.paths[fullComponentName] = path.join(componentPath, componentName + '-ui');

                    if (arrayIndex < 0) {
                        UIList.push(fullComponentName);
                    }
                } else {
                    delete pathList.paths[fullComponentName];

                    if (arrayIndex > -1) {
                        UIList.splice(arrayIndex, 1);
                    }
                }

                grunt.file.write(options.componentPathsFile, 'require.config(' + JSON.stringify(pathList) + ');');
                grunt.file.write(options.componentUIFile, 'require(' + JSON.stringify(UIList) + ');');
            }
        };

       /**
        * Looks inside the given directory for component .dust templates,
        * and registers/removes them as component names inside component-installed.json.
        * This registration is required for {@c-component_name /} usage inside
        * view templates.
        *
        * mode: install|uninstall
        * componentPath: bower_components or custom path
        * local: optional boolean to indicate this is a locally created component
        */
        var updateComponentList = function(mode, componentPath, local) {
            console.log('Looking for .dust files inside ' + componentPath + ':');

            // Determine what templates are included in the stencil
            var templates = grunt.file.expand({ cwd: componentPath }, '*.dust');

            // Update registry
            templates.forEach(function(elem, idx) {
                // We don't need the file extension
                elem = elem.split('.')[0];

                if (mode === 'install') {
                    installedComponentList[elem] = local ? 'local' : 'stencil';
                } else {
                    delete installedComponentList[elem];
                }

                console.log('[' + mode + '] ' + elem);
            });

            // Write back out to the stencil list
            grunt.file.write(options.installedComponentsListFile, JSON.stringify(installedComponentList));
        };

       /**
        * mode: install|uninstall
        * location: Remote repository or installed bower component
        * callback: Invoked after bower completes
        */
        var callBower = function(mode, location, callback) {
            console.log('Bower ' + mode + ' ' + location);

            grunt.util.spawn({
                'cmd': 'bower',
                'args': [mode, location, '--save'],
                'opts': {
                    'cwd': '../'
                }
            }, function(error, result, code) {
                if (error) {
                    grunt.log.error(result.stderr);
                    return false;
                }

                console.log('Bower ' + mode + ' complete');
                callback();
            });
        };

        var componentPath;
        if (localComponent) {
            componentPath = path.join(componentDirectories.local, componentName);

            if (!grunt.file.isDir(componentPath)) {
                grunt.log.error('The directory `' + componentPath + '` does not exist. Did you spell the component name correctly?');
                return false;
            }

            updateComponentList(mode, componentPath, true);
            updateComponentUI(mode, componentPath, true);
            updateComponentSCSS(mode, componentPath, true);

            if (mode === 'install') {
                grunt.log.ok('Installation of ' + componentName + ' component complete. ' +
                    'Reference your component inside your view template with the ' +
                    'basic syntax: {@c-' + componentName + ' /}'
                );
            } else {
                grunt.log.ok('Uninstallation of ' + componentName + ' completed.');
            }

            done();
        } else {
            componentPath = path.join(componentDirectories.stencil, 'stencil-' + componentName);

            if (mode === 'install') {
                var branchName = '';
                if (gitBranch && gitBranch.length > 0) {
                    branchName = '#' + gitBranch;
                }

                callBower(mode, 'git://github.com/mobify/stencil-' + componentName + '.git' + branchName, function() {
                    updateComponentList(mode, componentPath);
                    updateComponentUI(mode, componentPath);
                    updateComponentSCSS(mode, componentPath);
                    grunt.log.ok('Installation of Stencil ' + componentName + ' component complete. ' +
                        'Reference your component inside your view template with the ' +
                        'basic syntax: {@c-' + componentName + ' /}'
                    );
                    done();
                });

            } else {
                updateComponentList(mode, componentPath);
                updateComponentUI(mode, componentPath);
                updateComponentSCSS(mode, componentPath);

                callBower(mode, 'stencil-' + componentName, function() {
                    grunt.log.ok('Uninstallation of Stencil ' + componentName + ' completed.');
                    done();
                });
            }
        }
    });
};