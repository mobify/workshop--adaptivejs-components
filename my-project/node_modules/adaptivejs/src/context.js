/*
 * A module for evaluating function and DOM element based template rendering
 * contexts.
 */
/*jshint forin: false */

define([
    'adaptivejs/utils',
    'adaptivejs/logger'
], function(Utils, Logger) {
    var Context = {};

    var isPrimitive = function(value) {
        var type = typeof value;
        return type !== 'object' && type !== 'function';
    };

    var isArrayLike = function(obj) {
        var isArray = Object.prototype.toString.call(obj) === '[object Array]';
        return isArray || obj.hasOwnProperty('length');
    };

    /**
     *  Recursively evaluates keys of the given context until we get
     *  a DOM node, DOM element, jQuery/Zepto object, or a primitive.
     */
    /* jshint ignore:start */
    Context.process = function(ogContext) {
        var errors = {};
        var walkContext = function(context) {
            var result;
            var value;

            if (context === null) {
                return undefined;
            }

            // Return DOM nodes, DOM elements, and primitives
            if (Utils.isDOMLike(context) || isPrimitive(context)) {
                return context;
            }

            // invoke functions
            if (typeof context === 'function') {
                result = walkContext(context(ogContext));

                // Primatives or complex objects which we don't care
                // to break into
                return result;
            }

            if (isArrayLike(context)) {
                result = [];
                for (var i = 0, len = context.length; i < len; i++) {
                    result.push(walkContext(context[i]));
                }
                return result;
            }

            // We know we are dealing with an object now. Lets grab the object to be
            //  evaluated and replace context with an empty object to fill in with the results
            //  of evaluating the object.
            for (var key in context) {
                if (!context.hasOwnProperty(key)) {
                    continue;
                }

                value = context[key];
                try {
                    Logger.addTimingPoint(key, {namespace: 'Evaluating View'});
                    Logger.increaseStack();
                    context[key] = walkContext(value);

                    // Warn if the key is undefined
                    // Keys should always be assigned some value
                    if (context[key] === undefined) {
                        Logger.log(key + ' key is undefined. Context keys should always return a value', 'warn');
                    }
                    Logger.decreaseStack();
                }
                catch (e) {
                    console.error('Error evaluating key "' + key + '". ' + e.stack);
                    context[key] = undefined;
                    errors[key] = e;
                }
            }

            return context;
        };

        var resultContext = walkContext(ogContext);

        // If there were errors, add them to the resulting context
        if (Object.keys(errors).length) {
            resultContext.errors = errors;
        }
        return resultContext;
    };
    /* jshint ignore:end */

    return Context;

});
