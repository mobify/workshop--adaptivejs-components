define([
    'adaptivejs/logger',
    'adaptivejs/utils'
], function(Logger, Utils) {

    var Router = function() {
        this.routes = [];
    };

    /**
     * Ignore constant, which allows users to give semantic meaning to
     * opt out of a route.
     *
     * Example:
     *
     * router.add(function() {
     *      return window.location.href === 'http://yourdomain.com/dont-match-this'; // true if route should not be matched
     * }, Router.Ignore);
     * @type {boolean}
     */
    Router.Ignore = false;

    /**
     *  Creates a route from a function and view pair. Stores
     *  the result to be processed later on.
     *  Returns this to allow for chaining of calls to `router.add`
     */
    Router.prototype.add = function(func, view) {
        if (!Utils.isFunction(func)) {
            console.error('AdaptiveJS Router - Error - First argument to add must be a function');
        }

        if (Utils.isObject(view) && !view.hasOwnProperty('template')) {
            console.error('AdaptiveJS Router - Error - Second argument to add must be a View');
        }

        this.routes.push({func: func, view: view});

        return this;
    };

    // adds: function(routes) {
    //     // Map routes supplied and pass them in to add
    //     // TODO: Implement
    // },

    /**
     *  Evaluate a given route but make sure we don't bomb
     *  out if we hit an error.
     */
    Router.prototype.evalRoute = function(route) {
        var result;

        try {
            result = route.func(this.doc);
        } catch (e) {
            console.warn('Router error:', e.stack);
        }

        return result;
    };

    /**
     *  Grab all of the routes currently contained in the router
     */
    Router.prototype.getRoutes = function() {
        return this.routes;
    };

    /**
     *  Given a document, lets run through our routes and see
     *  which one matches.
     *  Returns the view of the matched route.
     */
    Router.prototype.resolve = function(document) {
        var result;
        var self = this;

        this.doc = document;

        for (var i = 0, l = this.routes.length; i < l; i++) {
            var route = this.routes[i];
            if (self.evalRoute(route)){
                result = route;
                break;
            }
        }

        Logger.addTimingPoint('Routes resolved');

        return result ? result.view : result;
    };

    /**
     *  Creates a function which checks to see if the given selector
     *  is found within the document
     */
    Router.selectorMatch = function(selector) {
        var self = this;
        return function(capturedDoc) {
            var result = capturedDoc.querySelectorAll(selector);

            return result.length ? result : false;
        };
    };

    /**
     * Actually just the identity function.
     * This is deprecated, mostly because it doesn't do anything :)
     */
    Router.jsMatch = function(func) {
        console.warn('The Router.jsMatch function is deprecated. Please use an anonymous function instead.');
        return func;
    };

    /**
     *  URLMatching functionality
     *  http://www.mobify.com/mobifyjs/docs/matching-to-urls/
     */
    Router.urlMatch = function(url) {
        if (!Utils.isRegExp(url)) {
            url = new RegExp(url);
        }

        return function() {
            return url.test(document.URL);
        };
    };

    return Router;
});
