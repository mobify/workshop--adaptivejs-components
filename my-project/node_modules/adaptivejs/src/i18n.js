define(function() {

    var I18n = function(defaultLocale, dictionary) {
        this._init(defaultLocale, dictionary);
    };

    /**
     * Creates a new I18n object with a given default locale and dictionary
     */
    I18n.prototype._init = function(defaultLocale, dictionary) {
        if (!defaultLocale || typeof defaultLocale !== 'string') {
            throw new Error('Please specify a default locale');
        }
        if (typeof dictionary !== 'object') {
            if (!dictionary || typeof dictionary !== 'string') {
                throw new Error('Please specify a valid dictionary JSON file');
            }
            try {
                dictionary = JSON.parse(dictionary);
            } catch (e) {
                throw new Error('Please specify a valid dictionary JSON file');
            }
        }

        this.dictionary = dictionary;
        this.setDefaultLocale(defaultLocale);

        try {
            var dust = require('dust-core');
            if (dust) {
                this._setupDustHelper(dust);
            }
        } catch (e) {
        }
    };

    I18n.prototype._setupDustHelper = function(dust) {
        var i18n = this;
        dust.helpers.translate = function(chunk, context, bodies, params) {
            var key = params.key || '';
            return chunk.write(i18n.translate(key));
        };
    };

    /**
     * Sets the default locale
     */
    I18n.prototype.setDefaultLocale = function(locale) {
        if (!(this.dictionary && this.dictionary[locale])) {
            throw new Error(locale + ' dictionary is not available. Please Be sure that is exists.');
        }
        this.defaultLocale = locale;
        if (!this.currentLocale) {
            this.currentLocale = locale;
        }
        this.defaultDictionary = this.dictionary[locale];
    };

    /**
     * Sets the current locale to the given locale, but only if the
     * dictionary exists
     */
    I18n.prototype.setLocale = function(locale) {
        if (!(this.dictionary && this.dictionary[locale])) {
            throw new Error(locale + ' dictionary is not available. Please Be sure that is exists.');
        }
        this.currentDictionary = this.dictionary[locale];
        this.currentLocale = locale;
    };

    /**
     * Translates a given key. If no key if found in the current dictionary,
     * then the default dictionary is used. If no result is found there, then
     * a not found warning is shown. This should be only in debug mode.
     */
    I18n.prototype.translate = function(key) {
        var result;
        if (this.currentDictionary) {
            result = this.currentDictionary[key];
        }
        if (!result) {
            result = this.defaultDictionary[key];
        }
        if (!result) {
            result = '<' + key + '> not found for ' + this.currentLocale;
        }
        return result;
    };

    return I18n;
});
