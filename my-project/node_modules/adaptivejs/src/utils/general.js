define([
    'buildConfig'
], function(buildConfig) {

    var AdaptiveUtils = {};

    /**
     *  Pulled from Lodash, because we only use these few functions.
     */
    AdaptiveUtils.isFunction = function(value) {
        return typeof value === 'function';
    };

    // fallback for older versions of Chrome and Safari
    if (AdaptiveUtils.isFunction(/x/)) {
        AdaptiveUtils.isFunction = function(value) {
            return typeof value === 'function' && Object.prototype.toString.call(value) === '[object Function]';
        };
    }

    AdaptiveUtils.isObject = function(value) {
        // check if the value is the ECMAScript language type of Object
        // http://es5.github.io/#x8
        // and avoid a V8 bug
        // https://code.google.com/p/v8/issues/detail?id=2291
        var type = typeof value;
        return value && (type === 'function' || type === 'object') || false;
    };

    AdaptiveUtils.isRegExp = function(value) {
        var type = typeof value;

        return value && (type === 'function' || type === 'object') &&
            Object.prototype.toString.call(value) === '[object RegExp]' || false;
    };

    /**
     *  Creates a script string that will load a.js
     */
    AdaptiveUtils.getAjs = function(name, template) {
        var qs = template ? 'm=1&t=' + template : 't=miss';

        return '<script src="//a.mobify.com/' + name + '/a.js#' + qs + '" async></script>';
    };

    /**
     * Determines if the supplied node is a Node type, or a Node type of
     * the node's window. On some browsers Nodes created within an iframe
     * are not instances of the root/parent document's Node class.
     */
    var isNode = function(node) {
        return (node instanceof Node) ||
               (node && node.ownerDocument && node.ownerDocument.defaultView &&
                (node instanceof node.ownerDocument.defaultView.Node));
    };

    /**
     *  Returns true if obj is a Zepto/jQuery object or a DOM node
     */
    AdaptiveUtils.isDOMLike = function(obj) {
        if (window.Zepto && Zepto.zepto.isZ(obj)) {
            return true;
        } else if (window.jQuery && obj instanceof jQuery.fn.constructor) {
            return true;
        } else if (isNode(obj)) {
            return true;
        }

        return obj instanceof HTMLElement;
    };

    /**
     *  Gets all of the libraries related to adaptive, storing them as key/value pairs
     *  Key is the name of the library, value is the script HTML element
     *   mobify(.min).js
     *   adaptive(.min).js
     *   loader(.min).js
     *   adaptation(.min).js
     *   capture(-latest)(.min).js
     */
    var cachedLibs = {};
    var adaptiveLibRegEx = /(mobify|adaptive|loader|adaptation|capture)(?:-latest)?(?:\.min)?\.js/;
    AdaptiveUtils.getAdaptiveLibs = function() {
        try {
            if (Object.keys(cachedLibs).length > 0) {
                return cachedLibs;
            }

            var scripts = document.getElementsByTagName('script');
            for (var i = 0; i < scripts.length; i++) {
                // Check that script is external
                if (!scripts[i].hasAttribute('src')) {
                    continue;
                }

                var result = scripts[i].getAttribute('src').match(adaptiveLibRegEx);

                // Check that script is adaptive-related
                if (!result) {
                    continue;
                }

                // If loaded via a bootloader this will be async, which we don't
                //  want anymore as it should be cached.
                scripts[i].removeAttribute('async');

                cachedLibs[result[1]] = scripts[i];
            }

            return cachedLibs;
        } catch (e) {
            console.error('Couldn\'t determine adaptivejs build file used. The mobify-tag may be placed incorrectly.');
        }
    };

    return AdaptiveUtils;

});
