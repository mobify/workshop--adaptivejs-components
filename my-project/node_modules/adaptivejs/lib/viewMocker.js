/* global describe, beforeEach, it, afterEach */

define([
    '$',
    'adaptivejs/utils',
    'adaptivejs/view',
    'adaptivejs/defaults',
    'lib/documentFactory',
    'lib/testTarget',
    'lib/testTargetGroup',
    'lodash'
], function($, Utils, View, defaults, DocumentFactory, TestTarget, TestTargetGroup, _) {

    var TestView = function(view, fixture) {
        this.view = view;
        this.fixture = fixture;
    };

    /**
     * Sets up the mocker by processing the context and the
     * template. The template is attached to the selector
     * library's document, which can then be used in tests.
     */
    TestView.prototype.setup = function() {
        var doc = DocumentFactory.makeDocument(this.fixture);
        var mockView = _.cloneDeep(this.view);

        this._originalDoc = $.getDocument();
        $.attachDocument(doc);

        var defaultContext = defaults.getContext(doc);

        mockView.context = View.evaluateContext(mockView, defaultContext);
        mockView.template(mockView.context, function(err, out) {
            mockView.html = out;
        });

        $.attachDocument(DocumentFactory.makeDocument(mockView.html));

        this.mockView = mockView;
    };

    /**
     * Restores the original document back to the selector
     * library's document, cleaning up test resources.
     */
    TestView.prototype.teardown = function() {
        $.attachDocument(this._originalDoc);
    };

    /**
     * Sets up the mocked view automatically for a suite of tests.
     * Additionally it binds the selector engine to the adapted document,
     * allowing for testing the HTML structure.
     */
    var test = function(title, view, fixture, target, tests) {
        // There are two call formats:
        //
        // test(title, view, fixture, tests)
        // test(title, view, fixture, target, tests)

        // Swap arguments depending on the call format and set default values
        // accordingly.
        if (typeof tests === 'undefined') {
            tests = target;
            target = test._config.defaultTarget;
        }

        var targetGroup = new TestTargetGroup(target);

        var mock = new TestView(view, fixture);
        var makeTest = function(test) {
            var testName = test;

            it(testName, function() {
                tests[testName].call(mock, $, mock.mockView.context);
            });
        };

        var isTest = function(name) {
            return name !== 'setUp' && name !== 'tearDown';
        };

        _.each(targetGroup.targets, function(target) {
            var titleWithTarget = title;
            var labelForTarget = targetGroup.labelForTarget(target);

            if (labelForTarget !== '') {
                titleWithTarget += ' ' + labelForTarget;
            }

            describe(titleWithTarget, function() {
                beforeEach(function() {
                    target.setUp();
                    tests.setUp && tests.setUp($);
                    mock.setup();
                });

                for (var test in tests) {
                    if (tests.hasOwnProperty(test) && isTest(test)) {
                        makeTest(test);
                    }
                }

                afterEach(function() {
                    mock.teardown();
                    tests.tearDown && tests.tearDown($);
                    target.tearDown();
                });
            });
        });
    };

    test._config = {
        defaultTarget: new TestTarget()
    };

    test.config = function(options) {
        _.extend(test._config, options);
    };

    return test;
});
