{
  "name": "mobify-chai-assertions",
  "version": "1.2.0",
  "description": "Mobify's custom assertions for Chai",
  "main": "assertions.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mobify/chai-custom-assertions.git"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mobify/chai-custom-assertions/issues"
  },
  "homepage": "https://github.com/mobify/chai-custom-assertions",
  "readme": "# Custom Assertions For Chai\n\nFor our integration testing, we have made our own Chai's custom assertions. This is where we define, collect, and present them in a plugin form.\n\nhttps://www.npmjs.com/package/mobify-chai-assertions\n\n\n## How To Use the Plugin\n\nTo use the plugin, simply call Chai's `use()` function:\n\n```javascript\nvar chai = require('node_modules/chai/chai');\nvar customAssertions = require('node_modules/mobify-chai-assertions/assertions');\nchai.use(customAssertions);\n```\n\n\n## New Assertion Methods\n\nThe plugin extends Chai by adding the following methods. Feel free to use either the `assert` or `expect` styles. They work with any of the chains listed in the [Chai API documentation](http://chaijs.com/api/bdd/).\n\n(Note: since Chai's API supports only the `expect` style, we implemented these methods for the `expect` style first and then the `assert` style as a wrapper)\n\n### Elements\n\nAll of these assertions can take an optional `msg` parameter to output a custom error message on test failure. \n\n[ ] syntax denotes an optional parameter. \n\n`element([msg]) / elements([msg])`\n\n```javascript\n// Asserts that it is a Zepto/jQuery element.\nexpect($paymentOptions).to.be.an.element;\n\n// Takes an optional error message that is displayed on failure.\n// Default error message is \"Must be a Zepto/jQuery object\"\nexpect($paymentOptions).to.be.elements('failure: it is not a Zepto/jQuery object');\n\n//Can be chained with .present and .count (see below)\n```\n\n`present([num], [msg])`\n\n```javascript\n// Asserts that the length is at least (>=) than num.\n// Default is 1. \n// Can be used with all types of expressions.\nexpect($paymentOptions).to.be.present;\n\nvar items = [1, 2, 3];\nexpect(items).to.be.present;\nexpect(items).to.be.present(3);\nexpect(items).to.be.present(4, 'my custom failure message');\n\n// Can be used in a chain:\n// Zepto/jQuery object has length at least 1\nexpect($paymentOptions).to.have.elements.present;\n\n// Can be negated\n// Length is 0\nexpect($paymentOptions).to.have.elements.not.present;\n```\n\n`count(num, [msg])`\n\n```javascript\n// Asserts that it has a specified length\nvar items = [1, 2, 3];\nexpect(items).to.have.count(3);\nexpect(items).to.have.count(5, 'my custom failure message');\n\n// Asserts that a jQuery/Zepto object has a specified length\nvar $images = $('img');\nexpect($images).to.have.elements.count(24);\n```\n\n**Deprecated** `elementsPresent`, `elementsNotPresent` use `elements.present` and `elements.not.present` instead:\n\n```javascript\n// Asserts that there exists such element on page\nassert.elementsPresent($emailForm)\nexpect($emailForm).to.have.elementsPresent()\n\n// Asserts that there are 4 or more such elements\nassert.elementsPresent($links, 3)\nexpect($links).to.have.elementsPresent(3)\n\n// The negation\nassert.elementsNotPresent($emailForm)\nexpect($emailForm).to.not.have.elementsPresent()\n```\n\n**Deprecated** `elementsEqual`, `elementsNotEqual` use `elements.count` instead:\n\n```javascript\n// Asserts that there are exactly 3 of such elements\nassert.elementsEqual($images, 3)\nexpect($images).to.have.elementsEqual(3)\n\n// The negation\nassert.elementsNotEqual($images, 3)\nexpect($images).to.not.have.elementsEqual(3)\n```\n\n### Properties\n\nWorks with javascript objects.\n\n`properties`\n\n```javascript\n// Asserts that this object has the keys 'apple' and 'google'\nassert.properties(apps, 'apple', 'google')\nexpect(apps).to.have.properties('apple', 'google')\n```\n\n### Items\n\nWorks with a collection of things.\n\n`items([msg])`\n\n```javascript\n// Asserts that this collection (e.g. an array) has at least 1 item in it\nexpect(lists).to.have.items;\nexpect(lists).to.have.items('my custom failure message');\n```\n\n**Deprecated** `hasItems` use `have.items` instead:\n\n```javascript\n// Asserts that this collection (e.g. an array) has at least 1 item in it\nassert.hasItems(lists)\nexpect(lists).to.not.be.empty\n```\n",
  "readmeFilename": "README.md",
  "_id": "mobify-chai-assertions@1.2.0",
  "_from": "mobify-chai-assertions@^1.1.0"
}
